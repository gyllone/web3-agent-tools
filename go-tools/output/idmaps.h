/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package go-tools/coinmarketcap/Cryptocurrency */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"

#include <stdlib.h>
#include <stdbool.h>

typedef struct {
	bool is_some;
	char* value;
} OptionalStr;

typedef struct {
	bool is_some;
	long long value;
} OptionalInt;

typedef struct {
	bool is_some;
	bool value;
} OptionalBool;

typedef struct {
	size_t len;
	double* currencies;
} PriceArr;

typedef struct {
	size_t len;
	PriceArr* prices;
} QuoteArr;

typedef struct {
	bool is_fail;
	char* error_message;
	QuoteArr quotes;
} QuoteResult;

typedef struct {
	size_t len;
	char** keys;
	char** values;
} IdMap;

typedef struct {
	size_t len;
	IdMap* id_maps;
} IdMapArr;

typedef struct {
	bool is_fail;
	char* error_message;
	IdMapArr id_maps;
} IdMapResult;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// func query_quotes(ids C.OptionalStr, slug C.OptionalStr, symbol C.OptionalStr, convert C.OptionalStr, convert_id C.OptionalStr, aux C.OptionalStr, skip_invalid C.OptionalBool) C.QuoteResult {
//
extern __declspec(dllexport) QuoteResult query_quotes(OptionalStr ids, OptionalStr slug, OptionalStr convert, OptionalStr convert_id, OptionalStr aux, OptionalBool skip_invalid);
extern __declspec(dllexport) void query_quotes_release(QuoteResult result);
extern __declspec(dllexport) IdMapResult query_id_map(OptionalStr listing_status, OptionalInt start, OptionalInt limit, OptionalStr sort, OptionalStr symbol, OptionalStr aux);
extern __declspec(dllexport) void query_id_map_release(IdMapResult result);

#ifdef __cplusplus
}
#endif
