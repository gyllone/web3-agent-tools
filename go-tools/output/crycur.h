/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package coinmarketcap/Cryptocurrency */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"


#include <cryptocurrency.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// TODO: 使用symbol参数请求的话，返回格式与id和slug不统一，暂不支持
//
extern __declspec(dllexport) Result_List_List_Float query_quotes(Optional_String id, Optional_String slug, Optional_String convert, Optional_String convert_id, Optional_String aux, Optional_Bool skip_invalid);
extern __declspec(dllexport) void query_quotes_release(Result_List_List_Float result);
extern __declspec(dllexport) Result_List_Dict_String query_id_map(Optional_String listing_status, Optional_String sort, Optional_String symbol, Optional_String aux, Optional_Int start, Optional_Int limit);
extern __declspec(dllexport) void query_id_map_release(Result_List_Dict_String result);

// TODO: symbol请求与id和slug格式不符，暂未实现
//
extern __declspec(dllexport) Result_List_Dict_String query_metadata(Optional_String id, Optional_String slug, Optional_String address, Optional_String aux, Optional_Bool skip_invalid);
extern __declspec(dllexport) void query_metadata_release(Result_List_Dict_String result);
extern __declspec(dllexport) Result_List_MarketData query_listings(Optional_Int start, Optional_Int limit, Optional_Int price_min, Optional_Int price_max, Optional_Int market_cap_min, Optional_Int market_cap_max, Optional_Int volume_24h_min, Optional_Int volume_24h_max, Optional_Int circulating_supply_min, Optional_Int circulating_supply_max, Optional_Int percent_change_24h_min, Optional_Int percent_change_24h_max, Optional_String convert, Optional_String convert_id, Optional_String sort, Optional_String sort_dir, Optional_String cryptocurrency_type, Optional_String tag, Optional_String aux);
extern __declspec(dllexport) void query_listings_release(Result_List_MarketData result);
extern __declspec(dllexport) Result_List_Category query_categories(Optional_Int start, Optional_Int limit, Optional_String id, Optional_String slug, Optional_String symbol);
extern __declspec(dllexport) void query_categories_release(Result_List_Category result);
extern __declspec(dllexport) Result_Optional_CategorySingle query_category(String id, Optional_Int start, Optional_Int limit, Optional_String convert, Optional_String convert_id);
extern __declspec(dllexport) void query_category_release(Result_Optional_CategorySingle result);

#ifdef __cplusplus
}
#endif
